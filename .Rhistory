help.start()
?hist
apropos("hist")
example("hist")
vignette()
?
help("charts")
Prec = 85 /(85 + 15)
version
dir
load("C:/Users/Brian/R/.Rhistory")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
myobject<-1:10
myobject2<-seq(1:10)
myobjecte<-seq(1:10:1)
myobject3<-seq(from=1, to=10)
del myobjecte
delete(myobjecte)
sum(myobject)
clear(myobjecte)
help clear
myobject<-1:10
myobject2<-seq(1:10)
1:10 -> myobject3
paste ("R is great", c(4,7,55), "and I will love it")
"R is greate", rep(4:5), "and I will love it"
paste("R is greate", rep(4:5), "and I will love it")
paste("R is greate", rep(4:5, length = 20), "and I will love it")
c(2,4,5)
load("rivers")
load(rivers)
? rivers
y = rivers
x = 1:141
plot(x, y)
y <-c(1.7, "c")
z <-c(TRUE, 2)
z1 <-c(FALSE, 10)
y1 <- c("a", TRUE)
x <- 0:6
class(x)
as.numeric(x)
t <- as.numeric(x)
as.logical(x)
as.complex(x)
x <- factor(c("yes", "yes", "no", "maybe", "no"))
x
table(x)
x <- factor(c("yes", "yes", "no", "maybe", "no", "maybe", "maybe"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "maybe", "no", "maybe", "maybe"), levels = c("no", "maybe", "yes"))
x
table(x)
m <- matrix(1:4, nrow=2, ncol = 2, list(c("a","b"), c("c","d")))
m <- matrix(1:4, nrow=2, ncol = 2)
m
dimnames(m) <- list(c("a","b"))
m
dimnames(m) <- list(c("a","b"),c("x", "y"))
m
unclass(m)
x <- matrix(1:4, 2,2)
y <- matrix(rep(10,4), 2, 2)
x
y
y/x
y %/% x
library(swirl)
rm(list=ls())
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vec( x < 1)
tf <- num_vec[x < 1]
tf <- num_vec[< 1]
tf <- num_vec[ < 1]
tf <- num_vec[ num_vec < 1]
tf <- num_vect[ num_vect < 1]
tf <- num_vect < 1
print(tf)
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Brian Hughes")
my_name
paste(my_name, collapse = " ")
Try paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
print my_na
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vec5["bar"]
vect["bar"]
vect[c("foo", "bar")]
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frames(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
?read.csv
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/boring_function.R')
submit()
boring_function('My first function!')
boring_function
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/my_mean.R')
submit()
my_mean(c(4,5,10))
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/remainder.R')
submit()
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/remainder.R')
submit()
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/remainder.R')
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/remainder.R')
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/evaluate.R')
submit()
evaluate(sdev,c(1.4, 3.6, 7.9, 8.8) )
evaluate(sd,c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/telegram.R')
submit()
telegram("Does this","work?")
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/mad_libs.R')
submit()
mad_libs("Albuquerque","red","tree")
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/bin_op.R')
submit()
p('I', 'love', 'R!')
%p%('I', 'love', 'R!')
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/bin_op.R')
%p%('I', 'love', 'R!')
'I' %p% 'love' %p% 'R!'
source('C:/Users/Brian/AppData/Local/Temp/RtmpWaTesu/mad_libs.R')
mad_libs("Albuquerque"=place, "Black" = adjective)
mad_libs("Albuquerque"= place, "Black" = adjective)
mad_libs()
mad_libs("Albuquerque" = place)
mad_libs("Albuquerque" = "place")
mad_libs(place = "Albuquerque")
mad_libs(place = "Albuquerque", adjective = "Black", noun = "Dick")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if (x > 5) { x <- 0 }
x <- 0
x <- 1:10
if (x > 5)
1
x > 5
?if
?if()
?if
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
z <- 1
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
?setwd("C:/Current_Projects/R gits/Project2")
rm(list=ls())
ls()
ls
dir()
getwd()
setwd("C:/Current_Projects/R gits/Project2")
?files
files()
file.show()
list.files()
?solve
?matrix
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
cacheSolve(matrix(2, 3, 4, 2))
cacheSolve(matrix(2, 3, 4, 2, nrow = 2, ncol = 2))
cacheSolve(matrix(c(2, 3, 4, 2), nrow = 2, ncol = 2))
x = matrix()
View(x)
x = numeric()
x
get <- function() x
get()
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
makeVector()
makeVector(c(1,2))
makeVector(c(1,2,3))
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
cachemean()
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
makeVector(c(1,2))
cachemean(x)
v <- makeVector(c(1,2))
cachemean(v)
?mean
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
mx <- makeCacheMatrix(c(1,2, 3, 5), numr=2, numc = 2)
mx <- makeCacheMatrix(c(1,2, 3, 5))
cacheSolve(mx)
?reshape
?length
x <- matrix(c(1,2,3,2),nrow=2, ncol=2)
x
makeCacheMatrix(x)
m2 <- makeCacheMatrix(x)
cacheSolve(m2)
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
source('C:/Current_Projects/R gits/Project2/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
# this works:  cacheSolve(matrix(c(2, 3, 4, 2), nrow = 2, ncol = 2)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
m2 <- makeCacheMatrix(x)
x <- matrix(c(1,2,3,2),nrow=2, ncol=2)
m2 <- makeCacheMatrix(x)
cacheSolve(m2)
cacheSolve(x)
x
class(x)
cacheSolve(m2)
cacheSolve
x <- matrix(c(6,2.5,3,2),nrow=2, ncol=2)
m2 <- makeCacheMatrix(x)
cacheSolve(m2)
getpwd()
